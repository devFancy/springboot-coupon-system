version: "3.8"
services:
  mysql:
    image: mysql:8.0.34
    container_name: mysql-coupon
    restart: always
    ports:
      - '3306:3306'
    environment:
      - MYSQL_ROOT_PASSWORD=1234
    volumes:
      - ./coupon/mysql/initdb.d:/docker-entrypoint-initdb.d

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./support/monitoring/infra/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    environment:
      - TZ=Asia/Seoul

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./support/monitoring/infra/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./support/monitoring/infra/grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      - TZ=Asia/Seoul

  influxdb:
    image: influxdb:1.8
    container_name: influxdb
    ports:
      - "8086:8086"
    environment:
      - TZ=Asia/Seoul
      - INFLUXDB_DB=k6
      - INFLUXDB_ADMIN_USER=admin
      - INFLUXDB_ADMIN_PASSWORD=admin1234

  redis:
    image: redis:7.0
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
  redis-exporter: # Redis 인스턴스로부터 다양한 메트릭을 읽어와 Prometheus가 수집할 수 있는 형식으로 노출하는 역할
    image: oliver006/redis_exporter:latest
    container_name: redis-exporter
    restart: always
    # ports: # Prometheus가 Docker 내부 네트워크로 접근하므로, 호스트 포트 노출은 디버깅 시에만 필요 (선택 사항)
    #   - "9121:9121"
    environment:
      # 중요: REDIS_ADDR 은 실제 연결할 Redis 서비스의 주소를 가리켜야 합니다.
      # Docker Compose 네트워크 내에서는 Redis 서비스 이름('redis')을 사용합니다.
      - REDIS_ADDR=redis://redis:6379
    depends_on:
      - redis # 'redis' 서비스가 시작된 후에 'redis-exporter' 가 시작되도록 합니다.

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"

  kafka:
    image: wurstmeister/kafka:2.12-2.5.0
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: localhost
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_DELETE_TOPIC_ENABLE: "true"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
